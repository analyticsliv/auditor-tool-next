"use client";

import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { SessionProvider, signOut, useSession } from "next-auth/react";
import Link from "next/link";
import { usePathname, useRouter } from "next/navigation";
import { useEffect, useState } from "react";
import { getUserSession } from "./utils/user";
import { useAccountStore } from "./store/useAccountStore";
import { Home, BarChart, LayoutDashboard, User, FileText, LogOut, Menu, ChevronLeft, ChevronRight } from "lucide-react";
import { MdKeyboardDoubleArrowLeft } from "react-icons/md";
import { MdKeyboardDoubleArrowRight } from "react-icons/md";
import Loader from "./Components/loader";
const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({ children }) {
  const {
    auditData,
    endApiData,
  } = useAccountStore();

  const menuItems = [
    { icon: <Home size={20} />, label: "Home", path: "/" },
    { icon: <BarChart size={20} />, label: "Audit Preview", path: "/auditPreview" },
    { icon: <LayoutDashboard size={20} />, label: "Dashboard", path: "/dashboard" },
    { icon: <User size={20} />, label: "Account Details", path: "/2" },
    { icon: <FileText size={20} />, label: "Previous Audits", path: "/previousAudit" },
  ];


  const [userSession, setUserSession] = useState(null);
  const [user, setUser] = useState({});
  const [loading, setLoading] = useState(true);
  const [toggle, setToggle] = useState(false);
  const pathname = usePathname();
  const [currentLabel, setCurrentLabel] = useState("Connectors");

  const router = useRouter();

  useEffect(() => {
    const session = getUserSession();
    setUserSession(session);
    setUser(session?.user);
  }, []);

  const handleSignOut = async () => {
    setLoading(true);
    localStorage.removeItem("accessToken");
    localStorage.removeItem("session");
    await signOut({ redirect: false });
    router.push("/login");
    setLoading(false);
  };

  const toggleMenu = () => {
    setToggle(!toggle);
  };

  const isLoginPage = pathname === "/login";
  const isAuditById = pathname === "/previous-audit";

  useEffect(() => {
    if (!isLoginPage && useSession === "Guest") {
      router.push('/login');
      setLoading(false);
    }
    else if (isLoginPage && useSession !== 'Guest') {
      router.push('/');
      setLoading(false);
    }
    else if (userSession) setLoading(false);

  }, [userSession]);

  useEffect(() => {
    // Set the current label based on the current path
    const currentItem = menuItems.find((item) => item.path === pathname);
    if (currentItem) {
      setCurrentLabel(currentItem.label);
    } else {
      setCurrentLabel("Connectors");
    }
  }, [pathname, menuItems]);

  const disableMenus = Object.keys(auditData)?.length === 0 && Object.keys(endApiData).length === 0;

  return (
    <html lang="en">
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
        <SessionProvider>
          {
            loading ? (
              <div className="h-screen w-full flex flex-col justify-center items-center py-10">
                <Loader />
              </div>
            )
              :
              isLoginPage ? (
                <div>{children}</div>
              ) :
                isAuditById ? (
                  <div className="px-[5%] py-10">{children}</div>
                )
                  :
                  (
                    <main className="flex flex-col h-screen">
                      {/* Header */}
                      <header className="px-6 py-2 2xl:py-2.5 shadow-sm bg-white flex justify-between items-center border-b border-gray-200">
                        <h1 className="text-xl font-bold text-gray-800">
                          GA4 <span className="text-blue-600">Auditor Tool</span>
                        </h1>
                        <div className="text-lg text-gray-600 hidden sm:block">
                          Welcome,&nbsp;<span className="font-semibold text-gray-800">{user?.name}</span>
                        </div>

                        <div className="flex items-center gap-4">
                          <div className="text-right hidden sm:block">
                            <div className="text-sm font-semibold">{user?.name}</div>
                            <div className="text-xs text-gray-500">Admin</div>
                          </div>
                          {user?.image ?
                            <img src={user?.image} alt={user} className="rounded-full w-9 h-9 object-cover" />
                            : (<div className="rounded-full bg-gray-200 p-2.5">
                              <User strokeWidth={2.20} size={22} />
                            </div>)}
                        </div>
                      </header>

                      {/* Main content area */}
                      <div className="flex flex-1 overflow-hidden">
                        {/* Sidebar */}
                        <aside className={`${toggle ? "w-[70px]" : "w-[170px] xl:w-[185px] 2xl:w-[200px]"} bg-white transition-all duration-200 border-r border-gray-200`}>
                          <nav className="flex flex-col h-full">
                            <div className="flex-1 pt-6">
                              {menuItems?.map((item) => {
                                const isDisabled = disableMenus && item?.label !== "Home" && item?.label !== "Previous Audits";
                                const isActive = pathname === item.path;

                                return (
                                  <Link key={item?.path} href={isDisabled ? "#" : item?.path}>
                                    <div
                                      className={`flex items-center gap-3 px-2 xl:px-4 py-3 rounded-md mx-2 my-1 transition-all duration-150
                        ${isActive ? "bg-blue-50 text-blue-600 font-medium" : "hover:bg-gray-100"}
                        ${isDisabled ? "cursor-not-allowed opacity-50" : "cursor-pointer"}`}
                                    >
                                      {item?.icon}
                                      {!toggle && <span className="text-xs xl:text-sm 2xl:text-base truncate">{item?.label}</span>}
                                    </div>
                                  </Link>
                                );
                              })}
                            </div>

                            <div className="px-2 pb-4 space-y-2">
                              <button
                                onClick={handleSignOut}
                                className="flex items-center gap-3 px-4 py-2 text-sm text-red-500 hover:bg-red-50 rounded-md w-full"
                              >
                                <LogOut size={20} />
                                {!toggle && <span>Sign Out</span>}
                              </button>

                              <button
                                onClick={toggleMenu}
                                className="flex items-center justify-center w-full py-2 bg-gray-100 hover:bg-gray-200 rounded-md"
                              >
                                {toggle ? <ChevronRight size={18} /> : <ChevronLeft size={18} />}
                              </button>
                            </div>
                          </nav>
                        </aside>

                        {/* Main content area */}
                        <main className="flex-1 overflow-auto bg-slate-100">
                          <div className="p-6">{children}</div>
                        </main>
                      </div>

                      {/* Footer */}
                      <footer className="bg-white border-t border-gray-200 py-1 2xl:py-2 text-center text-[10px] 2xl:text-xs text-gray-500">
                        <p className="flex items-center justify-center gap-1">
                          <span>&copy; {new Date().getFullYear()}</span>
                          <span>Powered by</span>
                          <strong className="text-gray-700">AnalyticsLiv</strong>
                        </p>
                      </footer>
                    </main>
                  )}
        </SessionProvider>
      </body>
    </html>
  );
}
